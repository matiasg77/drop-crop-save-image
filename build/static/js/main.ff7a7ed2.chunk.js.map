{"version":3,"sources":["components/DropZone/styled.js","components/DropZone/DropZone.js","components/CropImage/canvasUtils.js","components/CropImage/styled.js","components/CropImage/CropImage.js","components/DropCropSaveImage/styled.js","components/DropCropSaveImage/DropCropSaveImage.js","App.js","reportWebVitals.js","index.js"],"names":["DropContent","styled","div","Drop","props","getColor","CancelButton","ButtonS","isDragAccept","isDragReject","isDragActive","Dropzone","setImg","handlerStep","handlerCancel","onDrop","useCallback","acceptedFiles","file","useDropzone","getRootProps","getInputProps","style","fontSize","onClick","variant","color","createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","a","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","round","x","y","toDataURL","Container","CropContiner","ZoomSlider","Slider","SliderS","ButtonsContent","ButtonUpload","ButtonCancel","CropImage","setCroppedImage","useState","crop","setCrop","zoom","setZoom","setFile","croppedAreaPixels","setCroppedAreaPixels","onCropComplete","croppedArea","console","log","handleCroppImage","croppedImage","useEffect","reader","FileReader","onabort","onerror","readAsDataURL","onload","result","convertFileToBase64","aspect","onCropChange","onZoomChange","value","min","step","aria-labelledby","onChange","e","DropCropSave","CurrentImage","Crop","UpLoadButton","DropCropSaveImage","logo","setImage","setStep","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ff7a7ed2.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport ButtonS from '@material-ui/core/Button'\r\n\r\nexport const DropContent = styled.div`\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n\r\nexport const Drop = styled.div`\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    border-width: 5px;\r\n    border-radius: 2px;\r\n    border-color: ${props => getColor(props)};\r\n    border-style: dashed;\r\n    background-color: #fafafa;\r\n    color: #bdbdbd;\r\n    outline: none;\r\n    transition: border .24s ease-in-out;\r\n    width: 50vw;\r\n    margin: 10px;\r\n`\r\n\r\nexport const CancelButton = styled(ButtonS)`\r\n    && {\r\n        margin-top: 10px;\r\n    }\r\n\r\n`\r\n\r\nconst getColor = (props) => {\r\n    if (props.isDragAccept) {\r\n        return 'rgba(116,103,239, 0.15)';\r\n    }\r\n    if (props.isDragReject) {\r\n        return '#ff1744';\r\n    }\r\n    if (props.isDragActive) {\r\n        return '#2196f3';\r\n    }\r\n    return '#eeeeee';\r\n  }","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nimport { DropContent, Drop, CancelButton } from './styled'\r\n\r\nconst Dropzone = ({ setImg, handlerStep, handlerCancel }) => {\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        let file = acceptedFiles[0]\r\n        setImg(file)\r\n        handlerStep(3)\r\n    }, [setImg, handlerStep])\r\n    \r\n    const {\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n      } = useDropzone({ onDrop })\r\n    \r\n    return (\r\n        <DropContent>\r\n            <Drop {...getRootProps({isDragActive, isDragAccept, isDragReject})}>\r\n                <input {...getInputProps()} />\r\n                <CloudUploadIcon style={{ fontSize: 80 }}/>\r\n                {\r\n                    isDragActive ?\r\n                        <p>Drop the files here ...</p> :\r\n                        <p>Drag 'n' drop some files here, or <u>click</u> to select files</p>\r\n                }\r\n            </Drop>\r\n            <CancelButton\r\n                onClick={handlerCancel}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                Cancel\r\n            </CancelButton>\r\n        </DropContent>\r\n    )\r\n}\r\n\r\nexport default Dropzone","const createImage = (url) =>\r\n    new Promise((resolve, reject) => {\r\n        const image = new Image()\r\n        image.addEventListener('load', () => resolve(image))\r\n        image.addEventListener('error', (error) => reject(error))\r\n        image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\r\n        image.src = url\r\n    })\r\n\r\nfunction getRadianAngle(degreeValue) {\r\n    return (degreeValue * Math.PI) / 180\r\n}\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n * @param {File} image - Image File url\r\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\r\n * @param {number} rotation - optional rotation parameter\r\n */\r\nexport async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\r\n    const image = await createImage(imageSrc)\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')\r\n\r\n    const maxSize = Math.max(image.width, image.height)\r\n    const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\r\n\r\n    // set each dimensions to double largest dimension to allow for a safe area for the\r\n    // image to rotate in without being clipped by canvas context\r\n    canvas.width = safeArea\r\n    canvas.height = safeArea\r\n\r\n    // translate canvas context to a central location on image to allow rotating around the center.\r\n    ctx.translate(safeArea / 2, safeArea / 2)\r\n    ctx.rotate(getRadianAngle(rotation))\r\n    ctx.translate(-safeArea / 2, -safeArea / 2)\r\n\r\n    // draw rotated image and store data.\r\n    ctx.drawImage(\r\n        image,\r\n        safeArea / 2 - image.width * 0.5,\r\n        safeArea / 2 - image.height * 0.5\r\n    )\r\n    const data = ctx.getImageData(0, 0, safeArea, safeArea)\r\n\r\n    // set canvas width to final desired crop size - this will clear existing context\r\n    canvas.width = pixelCrop.width\r\n    canvas.height = pixelCrop.height\r\n\r\n    // paste generated rotate image with correct offsets for x,y crop values.\r\n    ctx.putImageData(\r\n        data,\r\n        Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\r\n        Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\r\n    )\r\n\r\n    // As Base64 string\r\n    return canvas.toDataURL('image/jpeg');\r\n\r\n    // As a blob\r\n/*     return new Promise((resolve) => {\r\n        canvas.toBlob((file) => {\r\n            resolve(URL.createObjectURL(file))\r\n        }, 'image/png')\r\n    }) */\r\n}\r\n\r\n\r\n","import styled from 'styled-components'\r\nimport SliderS from '@material-ui/core/Slider'\r\nimport ButtonS from '@material-ui/core/Button'\r\n\r\nexport const Container = styled.div`\r\n    margin: 50px 50px;\r\n`\r\n\r\nexport const CropContiner = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 300px;\r\n    background: #333;\r\n`\r\n\r\nexport const ZoomSlider = styled.div`\r\n    padding: 16:\r\n    display: flex;\r\n    flexDirection: column;\r\n    alignItems: center;\r\n    flex: 1;\r\n`\r\n\r\nexport const Slider = styled(SliderS)`\r\n    && {\r\n    padding: 22px 0px;\r\n    marginLeft: 16;\r\n    }\r\n`\r\n\r\nexport const ButtonsContent = styled.div`\r\n    \r\n`\r\n\r\nexport const ButtonUpload = styled(ButtonS)`\r\n    && {\r\n        margin-left: 1.5em;\r\n        width: 100px;\r\n    }\r\n`\r\nexport const ButtonCancel = styled(ButtonS)`\r\n    && {\r\n        background: gray;\r\n        margin-right: 1.5em;\r\n        width: 100px;\r\n    }\r\n`","import React, { useState, useCallback, useEffect } from 'react'\r\nimport Cropper from 'react-easy-crop'\r\n\r\nimport { getCroppedImg } from './canvasUtils'\r\nimport {\r\n    Container,\r\n    CropContiner,\r\n    ZoomSlider,\r\n    Slider,\r\n    ButtonUpload,\r\n    ButtonCancel,\r\n    ButtonsContent\r\n} from './styled'\r\n\r\nconst CropImage = ({ image, handlerCancel, setCroppedImage }) => {\r\n    const [crop, setCrop] = useState({ x: 0, y: 0 })\r\n    const [zoom, setZoom] = useState(1)\r\n    const [file, setFile] = useState('')\r\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState(null)\r\n\r\n\r\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n        setCroppedAreaPixels(croppedAreaPixels)\r\n        console.log(croppedArea, croppedAreaPixels)\r\n    }, [])\r\n\r\n    const handleCroppImage = useCallback(async () => {\r\n        try {\r\n            const croppedImage = await getCroppedImg(\r\n                file,\r\n                croppedAreaPixels\r\n            )\r\n            setCroppedImage(croppedImage)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }, [file, croppedAreaPixels, setCroppedImage])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const convertFileToBase64 = () => {\r\n            const reader = new FileReader()\r\n            reader.onabort = () => console.log('file reading was aborted')\r\n            reader.onerror = () => console.log('file reading has failed')\r\n            reader.readAsDataURL(image)\r\n            reader.onload = () => setFile(reader.result)\r\n        }\r\n        convertFileToBase64()\r\n    }, [image])\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <CropContiner>\r\n                <Cropper\r\n                    image={file}\r\n                    crop={crop}\r\n                    zoom={zoom}\r\n                    aspect={4 / 3}\r\n                    onCropChange={setCrop}\r\n                    onCropComplete={onCropComplete}\r\n                    onZoomChange={setZoom}\r\n                />\r\n            </CropContiner>\r\n            <ZoomSlider>\r\n                <h3>Zoom</h3>\r\n                <Slider\r\n                    value={zoom}\r\n                    min={1}\r\n                    max={3}\r\n                    step={0.1}\r\n                    aria-labelledby=\"Zoom\"\r\n                    onChange={(e, zoom) => setZoom(zoom)}\r\n\r\n                />\r\n            </ZoomSlider>\r\n            <ButtonsContent>\r\n                <ButtonCancel\r\n                    onClick={handlerCancel}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    Cancel\r\n                </ButtonCancel>\r\n                <ButtonUpload\r\n                    onClick={handleCroppImage}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    Done\r\n                </ButtonUpload>\r\n            </ButtonsContent>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CropImage","import styled from 'styled-components'\r\nimport ButtonS from '@material-ui/core/Button'\r\n\r\nexport const DropCropSave = styled.div`\r\n\r\n`\r\n\r\nexport const CurrentImage = styled.div`\r\n\r\n`\r\n\r\nexport const Drop = styled.div`\r\n\r\n`\r\n\r\nexport const Crop = styled.div`\r\n\r\n`\r\n\r\nexport const UpLoadButton = styled(ButtonS)`\r\n    && {\r\n        margin-top: 1.5em;\r\n    }\r\n`\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport Dropzone from '../DropZone/DropZone'\r\nimport CropImage from '../CropImage/CropImage'\r\nimport { DropCropSave, Drop, Crop, CurrentImage, UpLoadButton } from './styled'\r\n\r\nconst DropCropSaveImage = ({ logo }) => {\r\n    const [image, setImage] = useState(null)\r\n    const [step, setStep] = useState(1)\r\n    const [croppedImage, setCroppedImage] = useState(null)\r\n\r\n    const handlerStep = step => setStep(step)\r\n\r\n    const handlerUploadButton = () => {\r\n        handlerStep(2)\r\n    }\r\n\r\n    const handlerCancel = () => {\r\n        setImage(null)\r\n        handlerStep(1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const imageUpload = () => {\r\n            //TODO upload logic \r\n            console.log(\"base64 CroppedImage: \", croppedImage)\r\n        }\r\n        imageUpload()\r\n    }, [croppedImage])\r\n\r\n    return (\r\n        <DropCropSave>\r\n            {step === 1 &&\r\n                <CurrentImage>\r\n                    <UpLoadButton\r\n                        onClick={handlerUploadButton}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Upload\r\n                    </UpLoadButton>\r\n                </CurrentImage>\r\n            }\r\n\r\n            {step === 2 &&\r\n                <Drop>\r\n                    <h2>Dropzone</h2>\r\n                    <Dropzone setImg={setImage} handlerStep={handlerStep} handlerCancel={handlerCancel} />\r\n                </Drop>\r\n            }\r\n\r\n            {(step === 3 && image) &&\r\n                <Crop>\r\n                    <h2>CropZone</h2>\r\n                    <CropImage image={image} handlerCancel={handlerCancel} setCroppedImage={setCroppedImage}/>\r\n                </Crop>\r\n            }\r\n        </DropCropSave>\r\n    )\r\n}\r\n\r\nexport default DropCropSaveImage","import './App.css';\nimport DropCropSaveImage from '../src/components/DropCropSaveImage/DropCropSaveImage'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DropCropSaveImage logo='https://res.cloudinary.com/blahbox/image/upload/v1621289402/fbuvsjx5lg2yqd1xd0zl.jpg'/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}